// Hoisting
// В языках программирования, в том числе в JavaScript, код исполняется в две фазы.

// Фаза компиляции, интерпретации или оценки (compile time, evaluation time) - подготовка перед исполнением кода, проверка валидности синтаксиса исходного кода.

// Во время этой фазы компилятор или интерпретатор находит синтаксические ошибки, ошибки типизации и т. д. То есть код еще не выполняется, только оценивается. Если эта фаза прошла успешно, это как минимум значит что в коде нет синтаксических ошибок и его можно запустить на исполнение.

// Фаза исполнения (runtime) - скрипт начинает исполняться, выполняются инструкции вызовов функций и оценки выражений, происходит поиск необходимых идентификаторов в соответствующих областях видимости и тому подобное.

// Если эта фаза завершилась успешно, значит скрипт написан без явных ошибок и закончил свою работу. На этой фазе могут быть ошибки связанные с отсутствующими свойствами и переменными, преобразованием типов и т. д., то есть что-то, что происходит только во время выполнения кода.

// Попробуйте выполнить следующий код. Так как мы сделали опечатку и вместо const пытаемся объявить переменную value ключевым словом cos, на фазе компиляции будет выявлена синтаксическая ошибка и фаза исполнения даже не запустится. В консоли мы сразу увидим сообщение об ошибке.

// console.log('Этого сообщения не будет в консоли.');

// cos value = 5;
// Copy
// Поднятие переменных (hoisting) - это механизм интерпретатора, который, до фазы исполнения кода, поднимает объявления переменных в начало области видимости (блочной или функции) в которой они были объявлены.

// Именно поэтому работает function declaration и так странно ведут себя переменные объявленные используя var - их объявления поднимаются в начало области видимости функции в которой они были объявлены.

// // Вот поэтому мы используем let или const

// console.log(value); // undefined
// value = 5;

// if (true) {
//   console.log(value); // 5
//   var value = 10;
//   console.log(value); // 10
// }

// value = 15;
// console.log(value); // 15
// Copy
// Переменные объявленные используя let или const так же поднимаются, но при этом подчиняются блочной области видимости, ничем не инициализируются по умолчанию и не доступны для обращения до того места в коде где были объявлены в коде.

// // В каждой области видимости будет создана своя, независимая переменная value

// console.log(value); // ReferenceError: value is not defined
// const value = 5;
// console.log(value); // 5

// if (true) {
//   console.log(value); // ReferenceError: value is not defined
//   const value = 10;
//   console.log(value); // 10
// }

// console.log(value); // 5
// Copy
// Более детально про поднятие идентификаторов и ключевые словах var, let и const читайте в этой статье.
//!==================
